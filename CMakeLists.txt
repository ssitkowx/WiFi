PROJECT                (Template)
CMAKE_MINIMUM_REQUIRED (VERSION 3.16)

SET (ProjectName            Project)
SET (TestsName              Tests)
SET (LibraryName            ${CMAKE_PROJECT_NAME}Lib)
SET (CurrentPath            ${CMAKE_CURRENT_SOURCE_DIR})
SET (PackagesPropertiesPath "")
SET (PackagesNames          )

MACRO (LOG_ERROR msg)
    EXECUTE_PROCESS (COMMAND ${CMAKE_COMMAND} -E cmake_echo_color --red --bold ${msg})
ENDMACRO ()

IF (EXISTS ${CurrentPath}/conanbuildinfo.cmake)
    INCLUDE (${CurrentPath}/conanbuildinfo.cmake)
    SET     (PackagesPropertiesPath ${CurrentPath})
ELSE()
    INCLUDE (${CurrentPath}/Conan/conanbuildinfo.cmake)
    SET     (PackagesPropertiesPath ${CurrentPath}/Conan)
ENDIF()

CONAN_BASIC_SETUP ()

SET  (ProjectIncludePath                  ${CurrentPath}/${ProjectName})
FILE (GLOB_RECURSE ProjectFilesAndFolders ${ProjectIncludePath}/*)

SET  (TestIncludePath                     ${CurrentPath}/${TestsName})
FILE (GLOB_RECURSE TestFilesAndFolders    ${TestIncludePath}/*)

MACRO (PARSE_SUBDIRECTORIES_PATHS search_directory paths)
    SET (directoryPaths "")
    FOREACH (subdirectoryPath ${search_directory})
        GET_FILENAME_COMPONENT (directoryPath ${subdirectoryPath} PATH)
        SET (directoryPaths ${directoryPaths} ${directoryPath})
    ENDFOREACH ()

    LIST (REMOVE_DUPLICATES directoryPaths)
    SET  (${paths} ${directoryPaths})
ENDMACRO ()

PARSE_SUBDIRECTORIES_PATHS ("${ProjectFilesAndFolders}" ProjectPathsLists)
PARSE_SUBDIRECTORIES_PATHS ("${TestFilesAndFolders}"    TestPathsLists)

MACRO (REMOVE_FILES directory)
    FILE (GLOB removeLists ${directory}/*)
    FOREACH (FILE ${removeLists})
        IF (EXISTS ${file})
            FILE (REMOVE ${file})
        ENDIF ()
    ENDFOREACH (FILE)
ENDMACRO ()

IF (NOT EXISTS "${PackagesPropertiesPath}/PackagesProperties.txt")
    LOG_ERROR ("PackagesProperties.txt does not exist")
    LOG_ERROR ("If this happend first time try use conan build . once more")
endif()

MACRO (FIND_IN_CMAKE_CACHE_FILE pattern result)
    FILE   (STRINGS           "${PackagesPropertiesPath}/PackagesProperties.txt" FullResult REGEX ${pattern})	
    STRING (LENGTH            ${FullResult} ResFullLen)
    STRING (FIND              ${FullResult} "=" CharacterEqual)
    MATH   (EXPR ResStartPos "${CharacterEqual} + 1")
    MATH   (EXPR ResLen      "${ResFullLen} - ${ResStartPos}")
    STRING (SUBSTRING         ${FullResult} ${ResStartPos} ${ResLen} res)
    SET    (${result}         ${res})
ENDMACRO ()

MACRO (GET_PACKAGES_PROPERTY pattern result)
    FOREACH (packageName ${PackagesNames})
        SET                      (FindPattern "")
        STRING                   (PREPEND FindPattern ${packageName} ${pattern})	
        SET                      (FindResult "")
        FIND_IN_CMAKE_CACHE_FILE (${FindPattern} FindResult)
        LIST                     (APPEND ${result} ${FindResult})
    ENDFOREACH (packageName)
ENDMACRO()

GET_PACKAGES_PROPERTY (PackageIncludePath PackageIncludesPaths)
GET_PACKAGES_PROPERTY (PackageLibPath     PackageLibsPaths)
GET_PACKAGES_PROPERTY (PackageName        PackageLibsNames)

SET          (BuildPath ${CurrentPath}/Build)
REMOVE_FILES ("${BuildPath}")

SOURCE_GROUP               (TREE                              ${ProjectIncludePath} PREFIX "" FILES ${ProjectFilesAndFolders})
LINK_DIRECTORIES           (${ProjectName}                    ${PackageLibsPaths})
ADD_EXECUTABLE             (${ProjectName}                    ${ProjectFilesAndFolders})
TARGET_INCLUDE_DIRECTORIES (${ProjectName} PUBLIC             ${ProjectPathsLists} ${PackageIncludesPaths})
TARGET_LINK_LIBRARIES      (${ProjectName}                    ${CONAN_LIBS_GTEST} ${PackageLibsNames})
TARGET_COMPILE_FEATURES    (${ProjectName} PUBLIC cxx_std_17)

SOURCE_GROUP               (TREE                              ${TestIncludePath} PREFIX "" FILES ${TestFilesAndFolders})
LINK_DIRECTORIES           (${TestsName}                      ${BuildPath}/lib ${PackageLibsPaths})
ADD_EXECUTABLE             (${TestsName}                      ${TestFilesAndFolders})
TARGET_INCLUDE_DIRECTORIES (${TestsName}   PUBLIC             ${ProjectPathsLists} ${TestPathsLists})
TARGET_LINK_LIBRARIES      (${TestsName}                      ${LibraryName} ${PackageLibsNames})
TARGET_COMPILE_FEATURES    (${TestsName}   PUBLIC cxx_std_17)

SOURCE_GROUP               (TREE                              ${ProjectIncludePath} PREFIX "" FILES ${ProjectFilesAndFolders})
ADD_LIBRARY                (${LibraryName} STATIC             ${ProjectFilesAndFolders})
TARGET_INCLUDE_DIRECTORIES (${LibraryName} PUBLIC             ${ProjectPathsLists} ${PackageIncludesPaths})
TARGET_LINK_LIBRARIES      (${LibraryName}                    ${CONAN_LIBS_GTEST})
TARGET_COMPILE_FEATURES    (${LibraryName} PUBLIC cxx_std_17)